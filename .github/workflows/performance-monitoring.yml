---
# Performance monitoring and optimization
name: Performance Monitoring

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: performance-${{ github.ref }}
  cancel-in-progress: true

env:
  HUGO_VERSION: 0.148.2
  HUGO_CACHEDIR: /tmp/hugo_cache

jobs:
  build-performance:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          cache: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Cache Hugo modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.HUGO_CACHEDIR }}
            /tmp/hugo_cache_modules
          key: ${{ runner.os }}-hugo-${{ env.HUGO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugo-${{ env.HUGO_VERSION }}-
            ${{ runner.os }}-hugo-

      - name: Measure build time and performance
        run: |
          echo "## Build Performance Report" > performance-report.md
          echo "| Metric | Value |" >> performance-report.md
          echo "|--------|-------|" >> performance-report.md

          # Measure build time
          start_time=$(date +%s)
          hugo --gc --minify --logLevel info --printMemoryUsage --printPathWarnings --verbose 2>&1 | tee build-output.log
          end_time=$(date +%s)
          build_duration=$((end_time - start_time))

          echo "| Build Duration | ${build_duration}s |" >> performance-report.md

          # Extract memory usage if available
          if grep -q "Total in" build-output.log; then
            memory_info=$(grep "Total in" build-output.log | tail -1)
            echo "| Memory Usage | ${memory_info} |" >> performance-report.md
          fi

          # Count pages generated
          page_count=$(find public -name "*.html" | wc -l)
          echo "| Pages Generated | ${page_count} |" >> performance-report.md

          # Measure site size
          site_size=$(du -sh public | cut -f1)
          echo "| Site Size | ${site_size} |" >> performance-report.md

          # Check for warnings
          warning_count=$(grep -c "WARN" build-output.log || echo "0")
          echo "| Build Warnings | ${warning_count} |" >> performance-report.md

      - name: Analyze asset sizes
        run: |
          echo "" >> performance-report.md
          echo "## Asset Analysis" >> performance-report.md
          echo "| File Type | Count | Total Size |" >> performance-report.md
          echo "|-----------|-------|------------|" >> performance-report.md

          # Analyze different file types
          for ext in html css js png jpg jpeg svg; do
            count=$(find public -name "*.${ext}" | wc -l)
            if [ $count -gt 0 ]; then
              size=$(find public -name "*.${ext}" -exec du -ch {} + | tail -1 | cut -f1)
              echo "| .${ext} | ${count} | ${size} |" >> performance-report.md
            fi
          done

      - name: Check for large files
        run: |
          echo "" >> performance-report.md
          echo "## Large Files (>100KB)" >> performance-report.md
          echo "| File | Size |" >> performance-report.md
          echo "|------|------|" >> performance-report.md

          find public -type f -size +100k -exec du -h {} \; | sort -hr | head -10 | while read size file; do
            echo "| ${file#public/} | ${size} |" >> performance-report.md
          done

      - name: Comment PR with performance report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## ðŸ“Š Performance Report\n\n' + report
            });

      - name: Upload performance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: |
            performance-report.md
            build-output.log
          retention-days: 30
