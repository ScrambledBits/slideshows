# Pull Request validation workflow
name: PR Validation

on:
  pull_request:
    branches: ["main"]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - ".gitignore"

# Minimal permissions for PR validation
permissions:
  contents: read
  pull-requests: write

concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  HUGO_VERSION: 0.148.2
  HUGO_CACHEDIR: /tmp/hugo_cache
  GO_VERSION: "1.21"

jobs:
  validate:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Cache Hugo modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.HUGO_CACHEDIR }}
            /tmp/hugo_cache_modules
          key: ${{ runner.os }}-hugo-${{ env.HUGO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugo-${{ env.HUGO_VERSION }}-
            ${{ runner.os }}-hugo-

      - name: Install Node.js dependencies
        if: hashFiles('package-lock.json') != ''
        run: npm ci

      - name: Validate Hugo modules
        run: |
          hugo mod verify
          hugo mod graph

      - name: Check for Hugo errors
        run: |
          hugo --gc --minify --logLevel info --printPathWarnings

      - name: Check for broken links (internal)
        run: |
          hugo --gc --minify --logLevel info 2>&1 | tee build.log
          if grep -q "ERROR\|WARN" build.log; then
            echo "::warning::Hugo build contains warnings or errors"
            cat build.log
          fi

      - name: Validate content structure
        run: |
          # Check that all slideshow directories have _index.md
          find content -maxdepth 2 -type d -not -name content -not -name _index.md | while read dir; do
            if [ ! -f "$dir/_index.md" ]; then
              echo "::error::Missing _index.md in $dir"
              exit 1
            fi
          done

      - name: Check image references
        run: |
          # Find broken image references in markdown files
          grep -r "!\[.*\](" content/ | grep -v "http" | while IFS=: read -r file rest; do
            image_path=$(echo "$rest" | sed -n 's/.*(\([^)]*\)).*/\1/p')
            if [ -n "$image_path" ] && [ ! -f "static/$image_path" ] && [ ! -f "content/$(dirname ${file#content/})/$image_path" ]; then
              echo "::warning::Potentially broken image reference in $file: $image_path"
            fi
          done