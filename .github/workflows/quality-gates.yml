---
# Quality gates workflow - enforces standards before merge
name: Quality Gates

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: quality-gates-${{ github.event.pull_request.number }}
  cancel-in-progress: true

env:
  HUGO_VERSION: 0.148.2
  HUGO_CACHEDIR: /tmp/hugo_cache
  GO_VERSION: "1.23"

jobs:
  # Skip draft PRs
  check-draft:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-24.04
    outputs:
      should-run: ${{ steps.check.outputs.result }}
    steps:
      - id: check
        run: echo "result=true" >> $GITHUB_OUTPUT

  lint-and-format:
    needs: check-draft
    if: needs.check-draft.outputs.should-run == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run Go linting
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          skip-cache: false

      - name: Check markdown formatting
        uses: DavidAnson/markdownlint-cli2-action@v20
        with:
          globs: 'README.md,CLAUDE.md,docs/**/*.md'
          config: '.markdownlint.json'

      - name: Validate YAML files
        run: |
          find .github/workflows -name "*.yml" -o -name "*.yaml" | xargs -I {} sh -c 'echo "Validating {}" && yamllint {}'

  build-test:
    needs: check-draft
    if: needs.check-draft.outputs.should-run == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Cache Hugo modules
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.HUGO_CACHEDIR }}
            /tmp/hugo_cache_modules
          key: ${{ runner.os }}-hugo-${{ env.HUGO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-hugo-${{ env.HUGO_VERSION }}-
            ${{ runner.os }}-hugo-

      - name: Test Hugo build
        run: |
          hugo --gc --minify --logLevel info --printPathWarnings 2>&1 | tee build.log

          # Check for build errors
          if grep -q "ERROR" build.log; then
            echo "::error::Hugo build failed with errors"
            exit 1
          fi

          # Warn about warnings but don't fail
          if grep -q "WARN" build.log; then
            echo "::warning::Hugo build contains warnings"
          fi

      - name: Test with drafts
        run: |
          hugo --gc --minify --buildDrafts --logLevel info 2>&1 | tee build-drafts.log

          if grep -q "ERROR" build-drafts.log; then
            echo "::warning::Draft build contains errors"
          fi

      - name: Validate generated HTML
        run: |
          # Check for common HTML issues
          find public -name "*.html" -exec grep -l "404" {} \; | head -5 | while read file; do
            echo "::warning::Potential 404 reference found in $file"
          done

  size-impact:
    needs: check-draft
    if: needs.check-draft.outputs.should-run == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Build PR version
        run: |
          hugo --gc --minify
          pr_size=$(du -sb public | cut -f1)
          echo "PR_SIZE=$pr_size" >> $GITHUB_ENV

      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          submodules: recursive

      - name: Build main version
        run: |
          hugo --gc --minify
          main_size=$(du -sb public | cut -f1)
          echo "MAIN_SIZE=$main_size" >> $GITHUB_ENV

      - name: Calculate size difference
        id: size-diff
        run: |
          pr_size=${{ env.PR_SIZE }}
          main_size=${{ env.MAIN_SIZE }}
          diff=$((pr_size - main_size))
          percent_change=$((diff * 100 / main_size))

          echo "diff=$diff" >> $GITHUB_OUTPUT
          echo "percent=$percent_change" >> $GITHUB_OUTPUT
          echo "pr_mb=$((pr_size / 1024 / 1024))" >> $GITHUB_OUTPUT
          echo "main_mb=$((main_size / 1024 / 1024))" >> $GITHUB_OUTPUT

      - name: Comment on size impact
        if: steps.size-diff.outputs.percent > 5 || steps.size-diff.outputs.percent < -5
        uses: actions/github-script@v7
        with:
          script: |
            const diff = ${{ steps.size-diff.outputs.diff }};
            const percent = ${{ steps.size-diff.outputs.percent }};
            const prMb = ${{ steps.size-diff.outputs.pr_mb }};
            const mainMb = ${{ steps.size-diff.outputs.main_mb }};

            const emoji = diff > 0 ? 'üìà' : 'üìâ';
            const sign = diff > 0 ? '+' : '';

            const diffMb = Math.abs(diff / 1024 / 1024).toFixed(2);
            const absPercent = Math.abs(percent);

            const comment = `${emoji} **Size Impact Report**

            | Metric | Value |
            |--------|-------|
            | Main branch size | ${mainMb} MB |
            | PR branch size | ${prMb} MB |
            | Size difference | ${sign}${diffMb} MB (${sign}${percent}%) |

            ${absPercent > 20 ? '‚ö†Ô∏è **Large size change detected!**' : ''}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Final status check that all quality gates passed
  quality-gates-summary:
    needs: [lint-and-format, build-test, size-impact]
    if: always()
    runs-on: ubuntu-24.04
    steps:
      - name: Check all jobs
        run: |
          lint_status="${{ needs.lint-and-format.result }}"
          build_status="${{ needs.build-test.result }}"
          size_status="${{ needs.size-impact.result }}"

          echo "Job results: lint=$lint_status, build=$build_status, size=$size_status"

          if [[ "$lint_status" != "success" ]]; then
            echo "Quality gate failed: lint-and-format ($lint_status)"
            exit 1
          fi
          if [[ "$build_status" != "success" ]]; then
            echo "Quality gate failed: build-test ($build_status)"
            exit 1
          fi
          if [[ "$size_status" != "success" ]]; then
            echo "Quality gate failed: size-impact ($size_status)"
            exit 1
          fi
          echo "All quality gates passed!"
